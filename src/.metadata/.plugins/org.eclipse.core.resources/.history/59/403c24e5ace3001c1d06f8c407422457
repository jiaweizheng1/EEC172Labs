// Names:
// Alexander Arasawa
// Jiawei Zheng

// Standard includes
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>

// Simplelink includes
#include "simplelink.h"

// Driverlib includes
#include "hw_types.h"
#include "hw_ints.h"
#include "hw_memmap.h"
#include "hw_common_reg.h"
#include "interrupt.h"
#include "hw_apps_rcm.h"
#include "prcm.h"
#include "spi.h"
#include "rom.h"
#include "rom_map.h"
#include "prcm.h"
#include "gpio.h"
#include "utils.h"
#include "systick.h"
#include "hw_timer.h"
#include "uart.h"
#include "timer.h"
#include "timer_if.h"

// Common interface includes
#include "pinmux.h"
#include "gpio_if.h"
#include "common.h"
#include "uart_if.h"
#include "Adafruit_GFX.h"
#include "Adafruit_SSD1351.h"

// Remote definitions
#define zero 685179135
#define one 685211775
#define two 685195455
#define three 685228095
#define four 685183215
#define five 685215855
#define six 685199535
#define seven 685232175
#define eight 685181175
#define nine 685213815
#define mute 685201575
#define volumedown 685185255

// Color definitions
#define BLACK 0x0000
#define BLUE 0x001F
#define GREEN 0x07E0
#define CYAN 0x07FF
#define RED 0xF800
#define MAGENTA 0xF81F
#define YELLOW 0xFFE0
#define WHITE 0xFFFF

#if defined(ccs)
extern void (*const g_pfnVectors[])(void);
#endif
#if defined(ewarm)
extern uVectorEntry __vector_table;
#endif

typedef struct PinSetting
{
    unsigned long port;
    unsigned int pin;
} PinSetting;

static PinSetting switch2 = {.port = GPIOA1_BASE, .pin = 0x1};

#define MAX_URI_SIZE 128
#define URI_SIZE MAX_URI_SIZE + 1

#define APPLICATION_NAME "SSL"
#define APPLICATION_VERSION "1.1.1.EEC.Spring2018"
#define SERVER_NAME "a2sfw25r1ow8ml-ats.iot.us-east-1.amazonaws.com"
#define GOOGLE_DST_PORT 8443

#define SL_SSL_CA_CERT "/cert/rootca.der" // starfield class2 rootca (from firefox) // <-- this one works
#define SL_SSL_PRIVATE "/cert/private.der"
#define SL_SSL_CLIENT "/cert/client.der"

// NEED TO UPDATE THIS FOR IT TO WORK!
#define DATE 21   /* Current Date */
#define MONTH 5   /* Month 1-12 */
#define YEAR 2022 /* Current year */
#define HOUR 0    /* Time - hours */
#define MINUTE 0  /* Time - minutes */
#define SECOND 0  /* Time - seconds */

#define POSTHEADER "POST /things/CC3200_Thing/shadow HTTP/1.1\n\r"
#define GETHEADER "GET /things/CC3200_Thing/shadow HTTP/1.1\n\r"
#define HOSTHEADER "Host: a2sfw25r1ow8ml-ats.iot.us-east-1.amazonaws.com\r\n"
#define CHEADER "Connection: Keep-Alive\r\n"
#define CTHEADER "Content-Type: application/json; charset=utf-8\r\n"
#define CLHEADER1 "Content-Length: "
#define CLHEADER2 "\r\n\r\n"

// For help with post json to device shadow
#define DATA1 "{\"state\": {\r\n\"desired\" : {\r\n\"default\": \"\",\r\n\"email\": \""
#define DATA2 "\"\r\n}}}\r\n\r\n"

// Application specific status/error codes
typedef enum
{
    // Choosing -0x7D0 to avoid overlap w/ host-driver's error codes
    LAN_CONNECTION_FAILED = -0x7D0,
    INTERNET_CONNECTION_FAILED = LAN_CONNECTION_FAILED - 1,
    DEVICE_NOT_IN_STATION_MODE = INTERNET_CONNECTION_FAILED - 1,

    STATUS_CODE_MAX = -0xBB8
} e_AppStatusCodes;

typedef struct
{
    /* time */
    unsigned long tm_sec;
    unsigned long tm_min;
    unsigned long tm_hour;
    /* date */
    unsigned long tm_day;
    unsigned long tm_mon;
    unsigned long tm_year;
    unsigned long tm_week_day; // not required
    unsigned long tm_year_day; // not required
    unsigned long reserved[3];
} SlDateTime;

//*****************************************************************************
//                 GLOBAL VARIABLES -- Start
//*****************************************************************************
volatile unsigned long g_ulStatus = 0;              // SimpleLink Status
unsigned long g_ulPingPacketsRecv = 0;              // Number of Ping Packets received
unsigned long g_ulGatewayIP = 0;                    // Network Gateway IP address
unsigned char g_ucConnectionSSID[SSID_LEN_MAX + 1]; // Connection SSID
unsigned char g_ucConnectionBSSID[BSSID_LEN_MAX];   // Connection BSSID
signed char *g_Host = SERVER_NAME;
SlDateTime g_time;
#if defined(ccs) || defined(gcc)
extern void (*const g_pfnVectors[])(void);
#endif
#if defined(ewarm)
extern uVectorEntry __vector_table;
#endif
//*****************************************************************************
//                 GLOBAL VARIABLES -- End: df
//*****************************************************************************

//****************************************************************************
//                      LOCAL FUNCTION PROTOTYPES
//****************************************************************************
static long WlanConnect();
static int set_time();
static void BoardInit(void);
static long InitializeAppVariables();
static int tls_connect();
static int connectToAccessPoint();
static int http_post(int);
static int http_get(int);

void c4buttons();
int c4check(char);
void tictacbuttons();
int tictaccheck(char);
void rpsbuttons();

//*****************************************************************************
// SimpleLink Asynchronous Event Handlers -- Start
//*****************************************************************************

//*****************************************************************************
//
//! \brief The Function Handles WLAN Events
//!
//! \param[in]  pWlanEvent - Pointer to WLAN Event Info
//!
//! \return None
//!
//*****************************************************************************
void SimpleLinkWlanEventHandler(SlWlanEvent_t *pWlanEvent)
{
    if (!pWlanEvent)
    {
        return;
    }

    switch (pWlanEvent->Event)
    {
    case SL_WLAN_CONNECT_EVENT:
    {
        SET_STATUS_BIT(g_ulStatus, STATUS_BIT_CONNECTION);

        //
        // Information about the connected AP (like name, MAC etc) will be
        // available in 'slWlanConnectAsyncResponse_t'.
        // Applications can use it if required
        //
        //  slWlanConnectAsyncResponse_t *pEventData = NULL;
        // pEventData = &pWlanEvent->EventData.STAandP2PModeWlanConnected;
        //

        // Copy new connection SSID and BSSID to global parameters
        memcpy(g_ucConnectionSSID, pWlanEvent->EventData.STAandP2PModeWlanConnected.ssid_name,
               pWlanEvent->EventData.STAandP2PModeWlanConnected.ssid_len);
        memcpy(g_ucConnectionBSSID,
               pWlanEvent->EventData.STAandP2PModeWlanConnected.bssid,
               SL_BSSID_LENGTH);

        UART_PRINT("[WLAN EVENT] STA Connected to the AP: %s , "
                   "BSSID: %x:%x:%x:%x:%x:%x\n\r",
                   g_ucConnectionSSID, g_ucConnectionBSSID[0],
                   g_ucConnectionBSSID[1], g_ucConnectionBSSID[2],
                   g_ucConnectionBSSID[3], g_ucConnectionBSSID[4],
                   g_ucConnectionBSSID[5]);
    }
    break;

    case SL_WLAN_DISCONNECT_EVENT:
    {
        slWlanConnectAsyncResponse_t *pEventData = NULL;

        CLR_STATUS_BIT(g_ulStatus, STATUS_BIT_CONNECTION);
        CLR_STATUS_BIT(g_ulStatus, STATUS_BIT_IP_AQUIRED);

        pEventData = &pWlanEvent->EventData.STAandP2PModeDisconnected;

        // If the user has initiated 'Disconnect' request,
        //'reason_code' is SL_USER_INITIATED_DISCONNECTION
        if (SL_USER_INITIATED_DISCONNECTION == pEventData->reason_code)
        {
            UART_PRINT("[WLAN EVENT]Device disconnected from the AP: %s,"
                       "BSSID: %x:%x:%x:%x:%x:%x on application's request \n\r",
                       g_ucConnectionSSID, g_ucConnectionBSSID[0],
                       g_ucConnectionBSSID[1], g_ucConnectionBSSID[2],
                       g_ucConnectionBSSID[3], g_ucConnectionBSSID[4],
                       g_ucConnectionBSSID[5]);
        }
        else
        {
            UART_PRINT("[WLAN ERROR]Device disconnected from the AP AP: %s, "
                       "BSSID: %x:%x:%x:%x:%x:%x on an ERROR..!! \n\r",
                       g_ucConnectionSSID, g_ucConnectionBSSID[0],
                       g_ucConnectionBSSID[1], g_ucConnectionBSSID[2],
                       g_ucConnectionBSSID[3], g_ucConnectionBSSID[4],
                       g_ucConnectionBSSID[5]);
        }
        memset(g_ucConnectionSSID, 0, sizeof(g_ucConnectionSSID));
        memset(g_ucConnectionBSSID, 0, sizeof(g_ucConnectionBSSID));
    }
    break;

    default:
    {
        UART_PRINT("[WLAN EVENT] Unexpected event [0x%x]\n\r",
                   pWlanEvent->Event);
    }
    break;
    }
}

//*****************************************************************************
//
//! \brief This function handles network events such as IP acquisition, IP
//!           leased, IP released etc.
//!
//! \param[in]  pNetAppEvent - Pointer to NetApp Event Info
//!
//! \return None
//!
//*****************************************************************************
void SimpleLinkNetAppEventHandler(SlNetAppEvent_t *pNetAppEvent)
{
    if (!pNetAppEvent)
    {
        return;
    }

    switch (pNetAppEvent->Event)
    {
    case SL_NETAPP_IPV4_IPACQUIRED_EVENT:
    {
        SlIpV4AcquiredAsync_t *pEventData = NULL;

        SET_STATUS_BIT(g_ulStatus, STATUS_BIT_IP_AQUIRED);

        // Ip Acquired Event Data
        pEventData = &pNetAppEvent->EventData.ipAcquiredV4;

        // Gateway IP address
        g_ulGatewayIP = pEventData->gateway;

        UART_PRINT("[NETAPP EVENT] IP Acquired: IP=%d.%d.%d.%d , "
                   "Gateway=%d.%d.%d.%d\n\r",
                   SL_IPV4_BYTE(pNetAppEvent->EventData.ipAcquiredV4.ip, 3),
                   SL_IPV4_BYTE(pNetAppEvent->EventData.ipAcquiredV4.ip, 2),
                   SL_IPV4_BYTE(pNetAppEvent->EventData.ipAcquiredV4.ip, 1),
                   SL_IPV4_BYTE(pNetAppEvent->EventData.ipAcquiredV4.ip, 0),
                   SL_IPV4_BYTE(pNetAppEvent->EventData.ipAcquiredV4.gateway, 3),
                   SL_IPV4_BYTE(pNetAppEvent->EventData.ipAcquiredV4.gateway, 2),
                   SL_IPV4_BYTE(pNetAppEvent->EventData.ipAcquiredV4.gateway, 1),
                   SL_IPV4_BYTE(pNetAppEvent->EventData.ipAcquiredV4.gateway, 0));
    }
    break;

    default:
    {
        UART_PRINT("[NETAPP EVENT] Unexpected event [0x%x] \n\r",
                   pNetAppEvent->Event);
    }
    break;
    }
}

//*****************************************************************************
//
//! \brief This function handles HTTP server events
//!
//! \param[in]  pServerEvent - Contains the relevant event information
//! \param[in]    pServerResponse - Should be filled by the user with the
//!                                      relevant response information
//!
//! \return None
//!
//****************************************************************************
void SimpleLinkHttpServerCallback(SlHttpServerEvent_t *pHttpEvent, SlHttpServerResponse_t *pHttpResponse)
{
    // Unused in this application
}

//*****************************************************************************
//
//! \brief This function handles General Events
//!
//! \param[in]     pDevEvent - Pointer to General Event Info
//!
//! \return None
//!
//*****************************************************************************
void SimpleLinkGeneralEventHandler(SlDeviceEvent_t *pDevEvent)
{
    if (!pDevEvent)
    {
        return;
    }

    //
    // Most of the general errors are not FATAL are are to be handled
    // appropriately by the application
    //
    UART_PRINT("[GENERAL EVENT] - ID=[%d] Sender=[%d]\n\n",
               pDevEvent->EventData.deviceEvent.status,
               pDevEvent->EventData.deviceEvent.sender);
}

//*****************************************************************************
//
//! This function handles socket events indication
//!
//! \param[in]      pSock - Pointer to Socket Event Info
//!
//! \return None
//!
//*****************************************************************************
void SimpleLinkSockEventHandler(SlSockEvent_t *pSock)
{
    if (!pSock)
    {
        return;
    }

    switch (pSock->Event)
    {
    case SL_SOCKET_TX_FAILED_EVENT:
        switch (pSock->socketAsyncEvent.SockTxFailData.status)
        {
        case SL_ECLOSE:
            UART_PRINT("[SOCK ERROR] - close socket (%d) operation "
                       "failed to transmit all queued packets\n\n",
                       pSock->socketAsyncEvent.SockTxFailData.sd);
            break;
        default:
            UART_PRINT("[SOCK ERROR] - TX FAILED  :  socket %d , reason "
                       "(%d) \n\n",
                       pSock->socketAsyncEvent.SockTxFailData.sd, pSock->socketAsyncEvent.SockTxFailData.status);
            break;
        }
        break;

    default:
        UART_PRINT("[SOCK EVENT] - Unexpected Event [%x0x]\n\n", pSock->Event);
        break;
    }
}

//*****************************************************************************
// SimpleLink Asynchronous Event Handlers -- End breadcrumb: s18_df
//*****************************************************************************

//*****************************************************************************
//
//! \brief This function initializes the application variables
//!
//! \param    0 on success else error code
//!
//! \return None
//!
//*****************************************************************************
static long InitializeAppVariables()
{
    g_ulStatus = 0;
    g_ulGatewayIP = 0;
    g_Host = SERVER_NAME;
    memset(g_ucConnectionSSID, 0, sizeof(g_ucConnectionSSID));
    memset(g_ucConnectionBSSID, 0, sizeof(g_ucConnectionBSSID));
    return SUCCESS;
}

//*****************************************************************************
//! \brief This function puts the device in its default state. It:
//!           - Set the mode to STATION
//!           - Configures connection policy to Auto and AutoSmartConfig
//!           - Deletes all the stored profiles
//!           - Enables DHCP
//!           - Disables Scan policy
//!           - Sets Tx power to maximum
//!           - Sets power policy to normal
//!           - Unregister mDNS services
//!           - Remove all filters
//!
//! \param   none
//! \return  On success, zero is returned. On error, negative is returned
//*****************************************************************************
static long ConfigureSimpleLinkToDefaultState()
{
    SlVersionFull ver = {0};
    _WlanRxFilterOperationCommandBuff_t RxFilterIdMask = {0};

    unsigned char ucVal = 1;
    unsigned char ucConfigOpt = 0;
    unsigned char ucConfigLen = 0;
    unsigned char ucPower = 0;

    long lRetVal = -1;
    long lMode = -1;

    lMode = sl_Start(0, 0, 0);
    ASSERT_ON_ERROR(lMode);

    // If the device is not in station-mode, try configuring it in station-mode
    if (ROLE_STA != lMode)
    {
        if (ROLE_AP == lMode)
        {
            // If the device is in AP mode, we need to wait for this event
            // before doing anything
            while (!IS_IP_ACQUIRED(g_ulStatus))
            {
#ifndef SL_PLATFORM_MULTI_THREADED
                _SlNonOsMainLoopTask();
#endif
            }
        }

        // Switch to STA role and restart
        lRetVal = sl_WlanSetMode(ROLE_STA);
        ASSERT_ON_ERROR(lRetVal);

        lRetVal = sl_Stop(0xFF);
        ASSERT_ON_ERROR(lRetVal);

        lRetVal = sl_Start(0, 0, 0);
        ASSERT_ON_ERROR(lRetVal);

        // Check if the device is in station again
        if (ROLE_STA != lRetVal)
        {
            // We don't want to proceed if the device is not coming up in STA-mode
            return DEVICE_NOT_IN_STATION_MODE;
        }
    }

    // Get the device's version-information
    ucConfigOpt = SL_DEVICE_GENERAL_VERSION;
    ucConfigLen = sizeof(ver);
    lRetVal = sl_DevGet(SL_DEVICE_GENERAL_CONFIGURATION, &ucConfigOpt,
                        &ucConfigLen, (unsigned char *)(&ver));
    ASSERT_ON_ERROR(lRetVal);

    UART_PRINT("Host Driver Version: %s\n\r", SL_DRIVER_VERSION);
    UART_PRINT("Build Version %d.%d.%d.%d.31.%d.%d.%d.%d.%d.%d.%d.%d\n\r",
               ver.NwpVersion[0], ver.NwpVersion[1], ver.NwpVersion[2], ver.NwpVersion[3],
               ver.ChipFwAndPhyVersion.FwVersion[0], ver.ChipFwAndPhyVersion.FwVersion[1],
               ver.ChipFwAndPhyVersion.FwVersion[2], ver.ChipFwAndPhyVersion.FwVersion[3],
               ver.ChipFwAndPhyVersion.PhyVersion[0], ver.ChipFwAndPhyVersion.PhyVersion[1],
               ver.ChipFwAndPhyVersion.PhyVersion[2], ver.ChipFwAndPhyVersion.PhyVersion[3]);

    // Set connection policy to Auto + SmartConfig
    //      (Device's default connection policy)
    lRetVal = sl_WlanPolicySet(SL_POLICY_CONNECTION,
                               SL_CONNECTION_POLICY(1, 0, 0, 0, 1), NULL, 0);
    ASSERT_ON_ERROR(lRetVal);

    // Remove all profiles
    lRetVal = sl_WlanProfileDel(0xFF);
    ASSERT_ON_ERROR(lRetVal);

    //
    // Device in station-mode. Disconnect previous connection if any
    // The function returns 0 if 'Disconnected done', negative number if already
    // disconnected Wait for 'disconnection' event if 0 is returned, Ignore
    // other return-codes
    //
    lRetVal = sl_WlanDisconnect();
    if (0 == lRetVal)
    {
        // Wait
        while (IS_CONNECTED(g_ulStatus))
        {
#ifndef SL_PLATFORM_MULTI_THREADED
            _SlNonOsMainLoopTask();
#endif
        }
    }

    // Enable DHCP client
    lRetVal = sl_NetCfgSet(SL_IPV4_STA_P2P_CL_DHCP_ENABLE, 1, 1, &ucVal);
    ASSERT_ON_ERROR(lRetVal);

    // Disable scan
    ucConfigOpt = SL_SCAN_POLICY(0);
    lRetVal = sl_WlanPolicySet(SL_POLICY_SCAN, ucConfigOpt, NULL, 0);
    ASSERT_ON_ERROR(lRetVal);

    // Set Tx power level for station mode
    // Number between 0-15, as dB offset from max power - 0 will set max power
    ucPower = 0;
    lRetVal = sl_WlanSet(SL_WLAN_CFG_GENERAL_PARAM_ID,
                         WLAN_GENERAL_PARAM_OPT_STA_TX_POWER, 1, (unsigned char *)&ucPower);
    ASSERT_ON_ERROR(lRetVal);

    // Set PM policy to normal
    lRetVal = sl_WlanPolicySet(SL_POLICY_PM, SL_NORMAL_POLICY, NULL, 0);
    ASSERT_ON_ERROR(lRetVal);

    // Unregister mDNS services
    lRetVal = sl_NetAppMDNSUnRegisterService(0, 0);
    ASSERT_ON_ERROR(lRetVal);

    // Remove  all 64 filters (8*8)
    memset(RxFilterIdMask.FilterIdMask, 0xFF, 8);
    lRetVal = sl_WlanRxFilterSet(SL_REMOVE_RX_FILTER, (_u8 *)&RxFilterIdMask,
                                 sizeof(_WlanRxFilterOperationCommandBuff_t));
    ASSERT_ON_ERROR(lRetVal);

    lRetVal = sl_Stop(SL_STOP_TIMEOUT);
    ASSERT_ON_ERROR(lRetVal);

    InitializeAppVariables();

    return lRetVal; // Success
}

//*****************************************************************************
//
//! Board Initialization & Configuration
//!
//! \param  None
//!
//! \return None
//
//*****************************************************************************
static void BoardInit(void)
{
/* In case of TI-RTOS vector table is initialize by OS itself */
#ifndef USE_TIRTOS
    //
    // Set vector table base
    //
#if defined(ccs)
    MAP_IntVTableBaseSet((unsigned long)&g_pfnVectors[0]);
#endif
#if defined(ewarm)
    MAP_IntVTableBaseSet((unsigned long)&__vector_table);
#endif
#endif
    //
    // Enable Processor
    //
    MAP_IntMasterEnable();
    MAP_IntEnable(FAULT_SYSTICK);

    PRCMCC3200MCUInit();
}

//****************************************************************************
//
//! \brief Connecting to a WLAN Accesspoint
//!
//!  This function connects to the required AP (SSID_NAME) with Security
//!  parameters specified in te form of macros at the top of this file
//!
//! \param  None
//!
//! \return  0 on success else error code
//!
//! \warning    If the WLAN connection fails or we don't aquire an IP
//!            address, It will be stuck in this function forever.
//
//****************************************************************************
static long WlanConnect()
{
    SlSecParams_t secParams = {0};
    long lRetVal = 0;

    secParams.Key = SECURITY_KEY;
    secParams.KeyLen = strlen(SECURITY_KEY);
    secParams.Type = SECURITY_TYPE;

    UART_PRINT("Attempting connection to access point: ");
    UART_PRINT(SSID_NAME);
    UART_PRINT("... ...");
    lRetVal = sl_WlanConnect(SSID_NAME, strlen(SSID_NAME), 0, &secParams, 0);
    ASSERT_ON_ERROR(lRetVal);

    UART_PRINT(" Connected!!!\n\r");

    // Wait for WLAN Event
    while ((!IS_CONNECTED(g_ulStatus)) || (!IS_IP_ACQUIRED(g_ulStatus)))
    {
        // Toggle LEDs to Indicate Connection Progress
        _SlNonOsMainLoopTask();
        GPIO_IF_LedOff(MCU_IP_ALLOC_IND);
        MAP_UtilsDelay(800000);
        _SlNonOsMainLoopTask();
        GPIO_IF_LedOn(MCU_IP_ALLOC_IND);
        MAP_UtilsDelay(800000);
    }

    return SUCCESS;
}

long printErrConvenience(char *msg, long retVal)
{
    UART_PRINT(msg);
    GPIO_IF_LedOn(MCU_RED_LED_GPIO);
    return retVal;
}

//*****************************************************************************
//
//! This function updates the date and time of CC3200.
//!
//! \param None
//!
//! \return
//!     0 for success, negative otherwise
//!
//*****************************************************************************

static int set_time()
{
    long retVal;

    g_time.tm_day = DATE;
    g_time.tm_mon = MONTH;
    g_time.tm_year = YEAR;
    g_time.tm_sec = HOUR;
    g_time.tm_hour = MINUTE;
    g_time.tm_min = SECOND;

    retVal = sl_DevSet(SL_DEVICE_GENERAL_CONFIGURATION,
                       SL_DEVICE_GENERAL_CONFIGURATION_DATE_TIME,
                       sizeof(SlDateTime), (unsigned char *)(&g_time));

    ASSERT_ON_ERROR(retVal);
    return SUCCESS;
}

//*****************************************************************************
//
//! This function demonstrates how certificate can be used with SSL.
//! The procedure includes the following steps:
//! 1) connect to an open AP
//! 2) get the server name via a DNS request
//! 3) define all socket options and point to the CA certificate
//! 4) connect to the server via TCP
//!
//! \param None
//!
//! \return  0 on success else error code
//! \return  LED1 is turned solid in case of success
//!    LED2 is turned solid in case of failure
//!
//*****************************************************************************
static int tls_connect()
{
    SlSockAddrIn_t Addr;
    int iAddrSize;
    unsigned char ucMethod = SL_SO_SEC_METHOD_TLSV1_2;
    unsigned int uxP;
    //    unsigned int uiCipher = SL_SEC_MASK_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA;
    unsigned int uiCipher = SL_SEC_MASK_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256;
    // SL_SEC_MASK_SSL_RSA_WITH_RC4_128_SHA
    // SL_SEC_MASK_SSL_RSA_WITH_RC4_128_MD5
    // SL_SEC_MASK_TLS_RSA_WITH_AES_256_CBC_SHA
    // SL_SEC_MASK_TLS_DHE_RSA_WITH_AES_256_CBC_SHA
    // SL_SEC_MASK_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
    // SL_SEC_MASK_TLS_ECDHE_RSA_WITH_RC4_128_SHA
    // SL_SEC_MASK_TLS_RSA_WITH_AES_128_CBC_SHA256
    // SL_SEC_MASK_TLS_RSA_WITH_AES_256_CBC_SHA256
    // SL_SEC_MASK_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    // SL_SEC_MASK_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 // does not work (-340, handshake fails)
    long lRetVal = -1;
    int iSockID;

    lRetVal = sl_NetAppDnsGetHostByName(g_Host, strlen((const char *)g_Host),
                                        (unsigned long *)&uxP, SL_AF_INET);

    if (lRetVal < 0)
    {
        return printErrConvenience("Device couldn't retrieve the host name \n\r", lRetVal);
    }

    Addr.sin_family = SL_AF_INET;
    Addr.sin_port = sl_Htons(GOOGLE_DST_PORT);
    Addr.sin_addr.s_addr = sl_Htonl(uxP);
    iAddrSize = sizeof(SlSockAddrIn_t);
    //
    // opens a secure socket
    //
    iSockID = sl_Socket(SL_AF_INET, SL_SOCK_STREAM, SL_SEC_SOCKET);
    if (iSockID < 0)
    {
        return printErrConvenience("Device unable to create secure socket \n\r", lRetVal);
    }

    //
    // configure the socket as TLS1.2
    //
    lRetVal = sl_SetSockOpt(iSockID, SL_SOL_SOCKET, SL_SO_SECMETHOD, &ucMethod,
                            sizeof(ucMethod));
    if (lRetVal < 0)
    {
        return printErrConvenience("Device couldn't set socket options \n\r", lRetVal);
    }
    //
    // configure the socket as ECDHE RSA WITH AES256 CBC SHA
    //
    lRetVal = sl_SetSockOpt(iSockID, SL_SOL_SOCKET, SL_SO_SECURE_MASK, &uiCipher,
                            sizeof(uiCipher));
    if (lRetVal < 0)
    {
        return printErrConvenience("Device couldn't set socket options \n\r", lRetVal);
    }

    /////////////////////////////////
    // START: COMMENT THIS OUT IF DISABLING SERVER VERIFICATION
    //
    // configure the socket with CA certificate - for server verification
    //
    lRetVal = sl_SetSockOpt(iSockID, SL_SOL_SOCKET,
                            SL_SO_SECURE_FILES_CA_FILE_NAME,
                            SL_SSL_CA_CERT,
                            strlen(SL_SSL_CA_CERT));

    if (lRetVal < 0)
    {
        return printErrConvenience("Device couldn't set socket options \n\r", lRetVal);
    }
    // END: COMMENT THIS OUT IF DISABLING SERVER VERIFICATION
    /////////////////////////////////

    // configure the socket with Client Certificate - for server verification
    //
    lRetVal = sl_SetSockOpt(iSockID, SL_SOL_SOCKET,
                            SL_SO_SECURE_FILES_CERTIFICATE_FILE_NAME,
                            SL_SSL_CLIENT,
                            strlen(SL_SSL_CLIENT));

    if (lRetVal < 0)
    {
        return printErrConvenience("Device couldn't set socket options \n\r", lRetVal);
    }

    // configure the socket with Private Key - for server verification
    //
    lRetVal = sl_SetSockOpt(iSockID, SL_SOL_SOCKET,
                            SL_SO_SECURE_FILES_PRIVATE_KEY_FILE_NAME,
                            SL_SSL_PRIVATE,
                            strlen(SL_SSL_PRIVATE));

    if (lRetVal < 0)
    {
        return printErrConvenience("Device couldn't set socket options \n\r", lRetVal);
    }

    /* connect to the peer device - Google server */
    lRetVal = sl_Connect(iSockID, (SlSockAddr_t *)&Addr, iAddrSize);

    if (lRetVal >= 0)
    {
        UART_PRINT("Device has connected to the website:");
        UART_PRINT(SERVER_NAME);
        UART_PRINT("\n\r");
    }
    else if (lRetVal == SL_ESECSNOVERIFY)
    {
        UART_PRINT("Device has connected to the website (UNVERIFIED):");
        UART_PRINT(SERVER_NAME);
        UART_PRINT("\n\r");
    }
    else if (lRetVal < 0)
    {
        UART_PRINT("Device couldn't connect to server:");
        UART_PRINT(SERVER_NAME);
        UART_PRINT("\n\r");
        return printErrConvenience("Device couldn't connect to server \n\r", lRetVal);
    }

    GPIO_IF_LedOff(MCU_RED_LED_GPIO);
    GPIO_IF_LedOn(MCU_GREEN_LED_GPIO);
    return iSockID;
}

int connectToAccessPoint()
{
    long lRetVal = -1;
    GPIO_IF_LedConfigure(LED1 | LED3);

    GPIO_IF_LedOff(MCU_RED_LED_GPIO);
    GPIO_IF_LedOff(MCU_GREEN_LED_GPIO);

    lRetVal = InitializeAppVariables();
    ASSERT_ON_ERROR(lRetVal);

    //
    // Following function configure the device to default state by cleaning
    // the persistent settings stored in NVMEM (viz. connection profiles &
    // policies, power policy etc)
    //
    // Applications may choose to skip this step if the developer is sure
    // that the device is in its default state at start of applicaton
    //
    // Note that all profiles and persistent settings that were done on the
    // device will be lost
    //
    lRetVal = ConfigureSimpleLinkToDefaultState();
    if (lRetVal < 0)
    {
        if (DEVICE_NOT_IN_STATION_MODE == lRetVal)
            UART_PRINT("Failed to configure the device in its default state \n\r");

        return lRetVal;
    }

    UART_PRINT("Device is configured in default state \n\r");

    CLR_STATUS_BIT_ALL(g_ulStatus);

    ///
    // Assumption is that the device is configured in station mode already
    // and it is in its default state
    //
    UART_PRINT("Opening sl_start\n\r");
    lRetVal = sl_Start(0, 0, 0);
    if (lRetVal < 0 || ROLE_STA != lRetVal)
    {
        UART_PRINT("Failed to start the device \n\r");
        return lRetVal;
    }

    UART_PRINT("Device started as STATION \n\r");

    //
    // Connecting to WLAN AP
    //
    lRetVal = WlanConnect();
    if (lRetVal < 0)
    {
        UART_PRINT("Failed to establish connection w/ an AP \n\r");
        GPIO_IF_LedOn(MCU_RED_LED_GPIO);
        return lRetVal;
    }

    UART_PRINT("Connection established w/ AP and IP is aquired \n\r");
    return 0;
}

// our times array for keeping track of the times in which a falling edge occurs
unsigned long times[35];

// for iterating through times array
unsigned long times_index = 0;

// falling edge handler for signal in from IR remote
static void FallingEdgeHandler(void)
{
    // start of new signal
    if (times_index == 0)
    {
        // reset timer
        HWREG(0xE000E018) = 1;
        times[times_index] = SysTickValueGet();
        times_index++;
    }
    else if (times_index == 1)
    {
        times[times_index] = SysTickValueGet();

        // check if start signal occurred
        if (times[times_index - 1] - times[times_index] > 1060000 && times[times_index - 1] - times[times_index] < 1070000)
        {
            // if start signal did indeed occurred, we keep appending times to the time array
            times_index++;
        }
        else
        {
            // else start signal did not occurred, so we reset time array to try again
            times_index = 0;

            // fix buggy offsets of wrong times in the time array by waiting a while before we read in falling edges again.
            // This is used in other parts of code for the same reason.
            UtilsDelay(999999);
        }
    }
    else if (times_index == 34)
    {
        // time array is filled, so we should stop
        times[times_index] = SysTickValueGet();
    }
    else if (times_index > 1 && times_index < 34)
    {
        times[times_index] = SysTickValueGet();
        times_index++;
    }

    unsigned long ulStatus;
    ulStatus = MAP_GPIOIntStatus(switch2.port, true);
    MAP_GPIOIntClear(switch2.port, ulStatus); // clear interrupts
}

//help synchronize games between boards
int gamemode = -1;

//pre initialize variables for free use
int i, j, k;

int m, n;

//common struct that is shared among all three games; x and y is for position on OLED
struct entry
{
    char entry;
    int x;
    int y;
};

// array struct for connect 4
struct entry c4_table[6][7];

// array struct for tic tac toe
struct entry tic_tac_table[3][3];

//array struct for rock paper scissors
struct entry rpstable[2];

long lRetVal = -1;

//local variable, int and char, for keep tracking of red board wins and yellow board wins
int red_wins;
char red_wins_buff[16];

int yellow_wins;
char yellow_wins_buff[16];

// UART1 line for synchronizing the two boards. When the other board press a button, for example, we have to mimic what button that board pressed in the OLED of this board.
// this code is for red board so the other board is the yellow board.
void UARTMessageInHandler()
{
    // clear UART interrupt
    UARTIntClear(UARTA1_BASE, UART_INT_RX);

    while (UARTCharsAvail(UARTA1_BASE))
    {
        char c = UARTCharGet(UARTA1_BASE);

        int level;

        if (gamemode == 0)
        {
            switch (c)
            {
            case '2':
                UART_PRINT("2\n\r");
                // other board places a piece into the 1st column of connect 4
                for (level = 5; level > -1; level--)
                {
                    if (c4_table[level][0].entry == ' ')
                    {
                        c4_table[level][0].entry = 'Y';
                        fillCircle(c4_table[level][0].x, c4_table[level][0].y, 8, YELLOW);
                        break;
                    }
                }
                break;
            case '3':
                UART_PRINT("3\n\r");
                // other board places a piece into the 2nd column of connect 4 and etc... same for 3, 4, 5, 6, and 7 column
                for (level = 5; level > -1; level--)
                {
                    if (c4_table[level][1].entry == ' ')
                    {
                        c4_table[level][1].entry = 'Y';
                        fillCircle(c4_table[level][1].x, c4_table[level][1].y, 8, YELLOW);
                        break;
                    }
                }
                break;
            case '4':
                UART_PRINT("4\n\r");
                for (level = 5; level > -1; level--)
                {
                    if (c4_table[level][2].entry == ' ')
                    {
                        c4_table[level][2].entry = 'Y';
                        fillCircle(c4_table[level][2].x, c4_table[level][2].y, 8, YELLOW);
                        break;
                    }
                }
                break;
            case '5':
                UART_PRINT("5\n\r");
                for (level = 5; level > -1; level--)
                {
                    if (c4_table[level][3].entry == ' ')
                    {
                        c4_table[level][3].entry = 'Y';
                        fillCircle(c4_table[level][3].x, c4_table[level][3].y, 8, YELLOW);
                        break;
                    }
                }
                break;
            case '6':
                UART_PRINT("6\n\r");
                for (level = 5; level > -1; level--)
                {
                    if (c4_table[level][4].entry == ' ')
                    {
                        c4_table[level][4].entry = 'Y';
                        fillCircle(c4_table[level][4].x, c4_table[level][4].y, 8, YELLOW);
                        break;
                    }
                }
                break;
            case '7':
                UART_PRINT("7\n\r");
                for (level = 5; level > -1; level--)
                {
                    if (c4_table[level][5].entry == ' ')
                    {
                        c4_table[level][5].entry = 'Y';
                        fillCircle(c4_table[level][5].x, c4_table[level][5].y, 8, YELLOW);
                        break;
                    }
                }
                break;
            case '8':
                UART_PRINT("8\n\r");
                for (level = 5; level > -1; level--)
                {
                    if (c4_table[level][6].entry == ' ')
                    {
                        c4_table[level][6].entry = 'Y';
                        fillCircle(c4_table[level][6].x, c4_table[level][6].y, 8, YELLOW);
                        break;
                    }
                }
                break;
            case '-':
                UART_PRINT("-\n\r");
                //other board changed games, so we also change games
                gamemode += 1;
                break;
            }
        }
        else if (gamemode == 1)
        {
            switch (c)
            {
            case '1':
                UART_PRINT("1\n\r");
                // other board places O in [0,0] in tic tac toe table
                if (tic_tac_table[0][0].entry == ' ')
                {
                    tic_tac_table[0][0].entry = 'O';
                    drawChar(tic_tac_table[0][0].x, tic_tac_table[0][0].y, 'O', YELLOW, BLACK, 4);
                }
                break;
            case '2':
                UART_PRINT("2\n\r");
                // other board places O in [0,1] in tic tac toe table and etc...
                if (tic_tac_table[0][1].entry == ' ')
                {
                    tic_tac_table[0][1].entry = 'O';
                    drawChar(tic_tac_table[0][1].x, tic_tac_table[0][1].y, 'O', YELLOW, BLACK, 4);
                }
                break;
            case '3':
                UART_PRINT("3\n\r");
                if (tic_tac_table[0][2].entry == ' ')
                {
                    tic_tac_table[0][2].entry = 'O';
                    drawChar(tic_tac_table[0][2].x, tic_tac_table[0][2].y, 'O', YELLOW, BLACK, 4);
                }
                break;
            case '4':
                UART_PRINT("4\n\r");
                if (tic_tac_table[1][0].entry == ' ')
                {
                    tic_tac_table[1][0].entry = 'O';
                    drawChar(tic_tac_table[1][0].x, tic_tac_table[1][0].y, 'O', YELLOW, BLACK, 4);
                }
                break;
            case '5':
                UART_PRINT("5\n\r");
                if (tic_tac_table[1][1].entry == ' ')
                {
                    tic_tac_table[1][1].entry = 'O';
                    drawChar(tic_tac_table[1][1].x, tic_tac_table[1][1].y, 'O', YELLOW, BLACK, 4);
                }
                break;
            case '6':
                UART_PRINT("6\n\r");
                if (tic_tac_table[1][2].entry == ' ')
                {
                    tic_tac_table[1][2].entry = 'O';
                    drawChar(tic_tac_table[1][2].x, tic_tac_table[1][2].y, 'O', YELLOW, BLACK, 4);
                }
                break;
            case '7':
                UART_PRINT("7\n\r");
                if (tic_tac_table[2][0].entry == ' ')
                {
                    tic_tac_table[2][0].entry = 'O';
                    drawChar(tic_tac_table[2][0].x, tic_tac_table[2][0].y, 'O', YELLOW, BLACK, 4);
                }
                break;
            case '8':
                UART_PRINT("8\n\r");
                if (tic_tac_table[2][1].entry == ' ')
                {
                    tic_tac_table[2][1].entry = 'O';
                    drawChar(tic_tac_table[2][1].x, tic_tac_table[2][1].y, 'O', YELLOW, BLACK, 4);
                }
                break;
            case '9':
                UART_PRINT("9\n\r");
                if (tic_tac_table[2][2].entry == ' ')
                {
                    tic_tac_table[2][2].entry = 'O';
                    drawChar(tic_tac_table[2][2].x, tic_tac_table[2][2].y, 'O', YELLOW, BLACK, 4);
                }
                break;
            case '-':
                UART_PRINT("-\n\r");
                //other board changed games, so we also change games
                gamemode += 1;
                break;
            }
        }
        else if (gamemode == 2)
        {
            switch (c)
            {
            case '1':
                UART_PRINT("1\n\r");
                // other board chooses rock
                if (rpstable[1].entry == ' ')
                {
                    rpstable[1].entry = 'R';
                }
                break;
            case '2':
                UART_PRINT("2\n\r");
                // other board chooses paper
                if (rpstable[1].entry == ' ')
                {
                    rpstable[1].entry = 'P';
                }
                break;
            case '3':
                UART_PRINT("3\n\r");
                // other board chooses scissors
                if (rpstable[1].entry == ' ')
                {
                    rpstable[1].entry = 'S';
                }
                break;
            case '-':
                UART_PRINT("-\n\r");
                //other board changed games, so we also change games
                gamemode += 1;
                break;
            }
        }
    }
}

void main()
{
    //
    // Initialize board configuration
    //
    BoardInit();

    PinMuxConfig();

    // configure UART1
    UARTConfigSetExpClk(UARTA1_BASE, 80000000, 115200, (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));
    UARTEnable(UARTA1_BASE);
    UARTDMADisable(UARTA1_BASE, (UART_DMA_RX | UART_DMA_TX));
    UARTFIFODisable(UARTA1_BASE);

    UARTIntEnable(UARTA1_BASE, UART_INT_RX);
    UARTIntRegister(UARTA1_BASE, UARTMessageInHandler);

    InitTerm();
    ClearTerm();

    //
    // Enable the SPI module clock
    //
    MAP_PRCMPeripheralClkEnable(PRCM_GSPI, PRCM_RUN_MODE_CLK);

    //
    // Reset the peripheral
    //
    MAP_PRCMPeripheralReset(PRCM_GSPI);

    Adafruit_Init();

    // set up and start systick
    SysTickPeriodSet(16777216);
    SysTickIntUnregister();
    SysTickEnable();

    //
    // Register the interrupt handler for receiver port
    //
    MAP_GPIOIntRegister(switch2.port, FallingEdgeHandler);

    //
    // Configure rising edge interrupts on receiver port
    //
    MAP_GPIOIntTypeSet(switch2.port, switch2.pin, GPIO_FALLING_EDGE); // SW2

    unsigned long ulStatus;

    ulStatus = MAP_GPIOIntStatus(switch2.port, false);
    MAP_GPIOIntClear(switch2.port, ulStatus); // clear interrupts on for

    // Enable interrupt handler for receiver port
    MAP_GPIOIntEnable(switch2.port, switch2.pin);

    // Connect the CC3200 to the local access point
    lRetVal = connectToAccessPoint();
    // Set time so that encryption can be used
    lRetVal = set_time();
    if (lRetVal < 0)
    {
        UART_PRINT("Unable to set time in the device");
        // LOOP_FOREVER();
    }
    // Connect to the website with TLS encryption
    lRetVal = tls_connect();
    if (lRetVal < 0)
    {
        ERR_PRINT(lRetVal);
    }

    //get comma separated red board and yellow board wins data from AWS IOT
    http_get(lRetVal);

    // preset positions on OLED for entries in connect 4 table
    i = 0;
    j = 0;
    for (n = 10; n < 128; n += 18)
    {
        for (m = 28; m < 128; m += 18)
        {
            c4_table[i][j].x = n;
            c4_table[i][j].y = m;
            i++;
        }
        j++;
        i = 0;
    }

    // preset positions on OLED for entries in tic tac toe table
    i = 0;
    j = 0;
    for (n = 10; n < 128; n += 45)
    {
        for (m = 0; m < 128; m += 50)
        {
            tic_tac_table[i][j].x = n;
            tic_tac_table[i][j].y = m;
            i++;
        }
        j++;
        i = 0;
    }

    // preset position on OLED for entries in rock papers scissors table
    rpstable[0].x = 20;
    rpstable[0].y = 50;
    rpstable[1].x = 90;
    rpstable[1].y = 50;

game0:
    gamemode = 0;
    UART_PRINT("Started Game 0\n\r");

    //draw connect 4 board on OLED, initially no pieces in any columns
    fillScreen(BLACK);
    fillRect(0, 18, 128, 110, BLUE);
    char temp = 'A';
    for (j = 0; j < 7; j++)
    {
        drawChar(c4_table[0][j].x, 0, temp, WHITE, BLACK, 1);
        if (c4_table[0][j].x != 100)
        {
            temp += 3;
        }
        else
        {
            temp += 4;
        }
        for (i = 0; i < 6; i++)
        {
            c4_table[i][j].entry = ' ';
            fillCircle(c4_table[i][j].x, c4_table[i][j].y, 8, BLACK);
        }
    }

    while (1)
    {
        // check for user input piece placements into connect 4 board
        c4buttons();

        // check for 4 in a row for red pieces in connect 4 array
        // if red board wins, post updated comma separated win data to AWS IOT, then restart game
        if (c4check('R'))
        {
            red_wins += 1;

            sprintf(red_wins_buff, "%d", red_wins);

            setTextColor(GREEN, BLACK);
            setCursor(20, 60);
            setTextSize(2);
            Outstr("You Win!");
            setCursor(20, 80);
            setTextSize(1);
            Outstr("Red Wins: ");
            Outstr(red_wins_buff);
            setCursor(20, 90);
            Outstr("Yellow Wins: ");
            Outstr(yellow_wins_buff);

            http_post(lRetVal);

            UtilsDelay(50 * 999999);

            goto game0;
        }

        // check for 4 in a row for yellow pieces in connect 4 array
        // if yellow board wins, post updated comma separated win data to AWS IOT, then restart game
        if (c4check('Y'))
        {
            yellow_wins += 1;

            sprintf(yellow_wins_buff, "%d", yellow_wins);

            setTextColor(MAGENTA, BLACK);
            setCursor(20, 60);
            setTextSize(2);
            Outstr("You Lose :(");
            setCursor(20, 80);
            setTextSize(1);
            Outstr("Red Wins: ");
            Outstr(red_wins_buff);
            setCursor(20, 90);
            Outstr("Yellow Wins: ");
            Outstr(yellow_wins_buff);

            http_post(lRetVal);

            UtilsDelay(50 * 999999);

            goto game0;
        }

        //change game to tic tac toe
        if (gamemode != 0)
        {
            goto game1;
        }
    }
game1:
    gamemode = 1;

    UART_PRINT("Started Game 1\n\r");

    //draw empty tic tac toe on OLED
    fillScreen(BLACK);
    drawFastHLine(0, 43, 128, BLUE);
    drawFastHLine(0, 86, 128, BLUE);
    drawFastVLine(43, 0, 128, BLUE);
    drawFastVLine(86, 0, 128, BLUE);
    setTextSize(5);
    for (j = 0; j < 3; j++)
    {
        for (i = 0; i < 3; i++)
        {
            tic_tac_table[i][j].entry = ' ';
        }
    }

    while (1)
    {
        tictacbuttons();

        // check for 3 in a row for X in tic tac toe array
        // if red board wins, post updated comma separated win data to AWS IOT, then restart game
        if (tictaccheck('X'))
        {
            red_wins += 1;

            sprintf(red_wins_buff, "%d", red_wins);

            setTextColor(GREEN, BLACK);
            setCursor(20, 60);
            setTextSize(2);
            Outstr("You Win!");
            setCursor(20, 80);
            setTextSize(1);
            Outstr("Red Wins: ");
            Outstr(red_wins_buff);
            setCursor(20, 90);
            Outstr("Yellow Wins: ");
            Outstr(yellow_wins_buff);

            http_post(lRetVal);

            UtilsDelay(50 * 999999);

            goto game1;
        }

        // check for 3 in a row for O in tic tac toe array
        // if yellow board wins, post updated comma separated win data to AWS IOT, then restart game
        if (tictaccheck('O'))
        {
            yellow_wins += 1;

            sprintf(yellow_wins_buff, "%d", yellow_wins);

            setTextColor(MAGENTA, BLACK);
            setCursor(20, 60);
            setTextSize(2);
            Outstr("You Lose :(");
            setCursor(20, 80);
            setTextSize(1);
            Outstr("Red Wins: ");
            Outstr(red_wins_buff);
            setCursor(20, 90);
            Outstr("Yellow Wins: ");
            Outstr(yellow_wins_buff);

            http_post(lRetVal);

            UtilsDelay(50 * 999999);

            goto game1;
        }

        //change game to rock papers scissors
        if (gamemode != 1)
        {
            goto game2;
        }
    }
game2:
    gamemode = 2;

    UART_PRINT("Started Game 2\n\r");

    // draw empty rock paper scissors on OLED
    fillScreen(BLACK);
    drawFastVLine(64, 0, 128, BLUE);
    rpstable[0].entry = ' ';
    rpstable[1].entry = ' ';

    while (1)
    {
        rpsbuttons();

        // wait until both boards has choosen rock, papers, or scissors
        if (rpstable[0].entry != ' ' && rpstable[1].entry != ' ')
        {

            int outcome = -1;

            drawChar(rpstable[1].x, rpstable[1].y, rpstable[1].entry, YELLOW, BLACK, 4);

            UtilsDelay(16 * 999999);

            //check who won
            if (rpstable[0].entry == 'R')
            {
                if (rpstable[1].entry == 'S')
                {
                    outcome = 1;
                }
                if (rpstable[1].entry == 'P')
                {
                    outcome = 0;
                }
            }
            else if (rpstable[0].entry == 'P')
            {
                if (rpstable[1].entry == 'R')
                {
                    outcome = 1;
                }
                if (rpstable[1].entry == 'S')
                {
                    outcome = 0;
                }
            }
            else if (rpstable[0].entry == 'S')
            {
                if (rpstable[1].entry == 'P')
                {
                    outcome = 1;
                }
                if (rpstable[1].entry == 'R')
                {
                    outcome = 0;
                }
            }

            // if red board wins, post updated comma separated win data to AWS IOT, then restart game
            if (outcome == 1)
            {
                red_wins += 1;
                sprintf(red_wins_buff, "%d", red_wins);

                setTextColor(GREEN, BLACK);
                setCursor(20, 60);
                setTextSize(2);
                Outstr("You Win!");
                setCursor(20, 80);
                setTextSize(1);
                Outstr("Red Wins: ");
                Outstr(red_wins_buff);
                setCursor(20, 90);
                Outstr("Yellow Wins: ");
                Outstr(yellow_wins_buff);

                http_post(lRetVal);
            }
            // if yellow board wins, post updated comma separated win data to AWS IOT, then restart game
            else if (outcome == 0)
            {
                yellow_wins += 1;
                sprintf(yellow_wins_buff, "%d", yellow_wins);

                setTextColor(MAGENTA, BLACK);
                setCursor(20, 60);
                setTextSize(2);
                Outstr("You Lose :(");
                setCursor(20, 80);
                setTextSize(1);
                Outstr("Red Wins: ");
                Outstr(red_wins_buff);
                setCursor(20, 90);
                Outstr("Yellow Wins: ");
                Outstr(yellow_wins_buff);

                http_post(lRetVal);
            }
            // no one won or tie
            else
            {
                setTextColor(CYAN, BLACK);
                setCursor(20, 60);
                setTextSize(2);
                Outstr("You Tied!");
                setCursor(20, 80);
                setTextSize(1);
                Outstr("Red Wins: ");
                Outstr(red_wins_buff);
                setCursor(20, 90);
                Outstr("Yellow Wins: ");
                Outstr(yellow_wins_buff);
            }

            UtilsDelay(50 * 999999);

            goto game2;
        }

        // change game to connect 4
        if (gamemode != 2)
        {
            goto game0;
        }
    }
}

// red board button presses for connect 4
void c4buttons()
{
    if (times_index == 34)
    {
        long int binary = 0;

        int binary_index = 31;

        // iterate through time array to calculate the decimal notation of the binary number in the data field of the waveform received
        for (i = 1; i < 33; i++)
        {
            if ((times[i] - times[i + 1]) > 170000)
            {
                binary |= 1 << binary_index;
            }
            binary_index--;
        }

        int level;

        switch (binary)
        {
        case two:
            Message("Two\n\r");
            // red board places red piece into 1st column of connect 4
            for (level = 5; level > -1; level--)
            {
                if (c4_table[level][0].entry == ' ')
                {
                    c4_table[level][0].entry = 'R';
                    fillCircle(c4_table[level][0].x, c4_table[level][0].y, 8, RED);
                    // tell the yellow board that red board has placed down a piece into 1st column
                    while (UARTBusy(UARTA1_BASE))
                        ;
                    UARTCharPut(UARTA1_BASE, '2');
                    break;
                }
            }
            break;
        case three:
            Message("Three\n\r");
            // red board places red piece into 2nd column of connect 4 and etc...
            for (level = 5; level > -1; level--)
            {
                if (c4_table[level][1].entry == ' ')
                {
                    c4_table[level][1].entry = 'R';
                    fillCircle(c4_table[level][1].x, c4_table[level][1].y, 8, RED);
                    // tell the yellow board that red board has placed down a piece into 2nd column and etc...
                    while (UARTBusy(UARTA1_BASE))
                        ;
                    UARTCharPut(UARTA1_BASE, '3');
                    break;
                }
            }
            break;
        case four:
            Message("Four\n\r");
            for (level = 5; level > -1; level--)
            {
                if (c4_table[level][2].entry == ' ')
                {
                    c4_table[level][2].entry = 'R';
                    fillCircle(c4_table[level][2].x, c4_table[level][2].y, 8, RED);
                    while (UARTBusy(UARTA1_BASE))
                        ;
                    UARTCharPut(UARTA1_BASE, '4');
                    break;
                }
            }
            break;
        case five:
            Message("Five\n\r");
            for (level = 5; level > -1; level--)
            {
                if (c4_table[level][3].entry == ' ')
                {
                    c4_table[level][3].entry = 'R';
                    fillCircle(c4_table[level][3].x, c4_table[level][3].y, 8, RED);
                    while (UARTBusy(UARTA1_BASE))
                        ;
                    UARTCharPut(UARTA1_BASE, '5');
                    break;
                }
            }
            break;
        case six:
            Message("Six\n\r");
            for (level = 5; level > -1; level--)
            {
                if (c4_table[level][4].entry == ' ')
                {
                    c4_table[level][4].entry = 'R';
                    fillCircle(c4_table[level][4].x, c4_table[level][4].y, 8, RED);
                    while (UARTBusy(UARTA1_BASE))
                        ;
                    UARTCharPut(UARTA1_BASE, '6');
                    break;
                }
            }
            break;
        case seven:
            Message("Seven\n\r");
            for (level = 5; level > -1; level--)
            {
                if (c4_table[level][5].entry == ' ')
                {
                    c4_table[level][5].entry = 'R';
                    fillCircle(c4_table[level][5].x, c4_table[level][5].y, 8, RED);
                    while (UARTBusy(UARTA1_BASE))
                        ;
                    UARTCharPut(UARTA1_BASE, '7');
                    break;
                }
            }
            break;
        case eight:
            Message("Eight\n\r");
            for (level = 5; level > -1; level--)
            {
                if (c4_table[level][6].entry == ' ')
                {
                    c4_table[level][6].entry = 'R';
                    fillCircle(c4_table[level][6].x, c4_table[level][6].y, 8, RED);
                    while (UARTBusy(UARTA1_BASE))
                        ;
                    UARTCharPut(UARTA1_BASE, '8');
                    break;
                }
            }
            break;
        case volumedown: // change game
            Message("Volumedown\n\r");
            gamemode += 1;
            // tell the yellow board to change game
            while (UARTBusy(UARTA1_BASE))
                ;
            UARTCharPut(UARTA1_BASE, '-');
            break;
        }

        // reset times array for reading in another button press
        times_index = 0;
    }
}

//funct to check 4 in a row in the connect 4 array
int c4check(char c)
{
    int in_a_row;

    // each row has 4 different ways to win(7 entries left right)
    for (i = 0; i < 6; i++)
    {
        for (j = 0; j < 4; j++)
        {
            in_a_row = 0;
            for (k = 0; k < 4; k++)
            {
                if (c4_table[i][j + k].entry == c)
                    in_a_row++;
            }
            if (in_a_row == 4)
                return 1;
        }
    }

    // each column has 3 different ways to win(6 entries top down)
    for (j = 0; j < 7; j++)
    {
        for (i = 0; i < 3; i++)
        {
            in_a_row = 0;
            for (k = 0; k < 4; k++)
            {
                if (c4_table[i + k][j].entry == c)
                    in_a_row++;
            }
            if (in_a_row == 4)
                return 1;
        }
    }

    // diagonals
    int x, y;
    for (i = 1; i < 5; i++)
    {
        for (j = 1; j < 6; j++)
        {
            in_a_row = 0;
            for (x = i, y = j; (x > -1) || (y > -1); x--, y--)
            {
                if (c4_table[x][y].entry == c)
                {
                    in_a_row++;
                    if (in_a_row == 4)
                        return 1;
                }
                else
                    break;
            }
            for (x = i + 1, y = j + 1; (x < 6) || (y < 7); x++, y++)
            {
                if (c4_table[x][y].entry == c)
                {
                    in_a_row++;
                    if (in_a_row == 4)
                        return 1;
                }
                else
                    break;
            }
            in_a_row = 0;
            for (x = i, y = j; (x < 6) || (y > -1); x++, y--)
            {
                if (c4_table[x][y].entry == c)
                {
                    in_a_row++;
                    if (in_a_row == 4)
                        return 1;
                }
                else
                    break;
            }
            for (x = i - 1, y = j + 1; (x > -1) || (y < 7); x--, j++)
            {
                if (c4_table[x][y].entry == c)
                {
                    in_a_row++;
                    if (in_a_row == 4)
                        return 1;
                }
                else
                    break;
            }
        }
    }
    return 0;
}

// red board button presses for tic tac toe
void tictacbuttons()
{
    if (times_index == 34)
    {
        long int binary = 0;

        int binary_index = 31;

        // iterate through time array to calculate the decimal notation of the binary number in the data field of the waveform received
        for (i = 1; i < 33; i++)
        {
            if ((times[i] - times[i + 1]) > 170000)
            {
                binary |= 1 << binary_index;
            }
            binary_index--;
        }

        switch (binary)
        {
        case one:
            Message("One\n\r");
            // red board places X into [0,0] of tic tac toe array. Then use UART to tell yellow board this information so yellow board can update OLED. etc... for rest
            if (tic_tac_table[0][0].entry == ' ')
            {
                tic_tac_table[0][0].entry = 'X';
                drawChar(tic_tac_table[0][0].x, tic_tac_table[0][0].y, 'X', RED, BLACK, 4);
                while (UARTBusy(UARTA1_BASE))
                    ;
                UARTCharPut(UARTA1_BASE, '1');
            }
            break;
        case two:
            Message("Two\n\r");
            if (tic_tac_table[0][1].entry == ' ')
            {
                tic_tac_table[0][1].entry = 'X';
                drawChar(tic_tac_table[0][1].x, tic_tac_table[0][1].y, 'X', RED, BLACK, 4);
                while (UARTBusy(UARTA1_BASE))
                    ;
                UARTCharPut(UARTA1_BASE, '2');
            }
            break;
        case three:
            Message("Three\n\r");
            if (tic_tac_table[0][2].entry == ' ')
            {
                tic_tac_table[0][2].entry = 'X';
                drawChar(tic_tac_table[0][2].x, tic_tac_table[0][2].y, 'X', RED, BLACK, 4);
                while (UARTBusy(UARTA1_BASE))
                    ;
                UARTCharPut(UARTA1_BASE, '3');
            }
            break;
        case four:
            Message("Four\n\r");
            if (tic_tac_table[1][0].entry == ' ')
            {
                tic_tac_table[1][0].entry = 'X';
                drawChar(tic_tac_table[1][0].x, tic_tac_table[1][0].y, 'X', RED, BLACK, 4);
                while (UARTBusy(UARTA1_BASE))
                    ;
                UARTCharPut(UARTA1_BASE, '4');
            }
            break;
        case five:
            Message("Five\n\r");
            if (tic_tac_table[1][1].entry == ' ')
            {
                tic_tac_table[1][1].entry = 'X';
                drawChar(tic_tac_table[1][1].x, tic_tac_table[1][1].y, 'X', RED, BLACK, 4);
                while (UARTBusy(UARTA1_BASE))
                    ;
                UARTCharPut(UARTA1_BASE, '5');
            }
            break;
        case six:
            Message("Six\n\r");
            if (tic_tac_table[1][2].entry == ' ')
            {
                tic_tac_table[1][2].entry = 'X';
                drawChar(tic_tac_table[1][2].x, tic_tac_table[1][2].y, 'X', RED, BLACK, 4);
                while (UARTBusy(UARTA1_BASE))
                    ;
                UARTCharPut(UARTA1_BASE, '6');
            }
            break;
        case seven:
            Message("Seven\n\r");
            if (tic_tac_table[2][0].entry == ' ')
            {
                tic_tac_table[2][0].entry = 'X';
                drawChar(tic_tac_table[2][0].x, tic_tac_table[2][0].y, 'X', RED, BLACK, 4);
                while (UARTBusy(UARTA1_BASE))
                    ;
                UARTCharPut(UARTA1_BASE, '7');
            }
            break;
        case eight:
            Message("Eight\n\r");
            if (tic_tac_table[2][1].entry == ' ')
            {
                tic_tac_table[2][1].entry = 'X';
                drawChar(tic_tac_table[2][1].x, tic_tac_table[2][1].y, 'X', RED, BLACK, 4);
                while (UARTBusy(UARTA1_BASE))
                    ;
                UARTCharPut(UARTA1_BASE, '8');
            }
            break;
        case nine:
            Message("Nine\n\r");
            if (tic_tac_table[2][2].entry == ' ')
            {
                tic_tac_table[2][2].entry = 'X';
                drawChar(tic_tac_table[2][2].x, tic_tac_table[2][2].y, 'X', RED, BLACK, 4);
                while (UARTBusy(UARTA1_BASE))
                    ;
                UARTCharPut(UARTA1_BASE, '9');
            }
            break;
        case volumedown: // change game
            Message("Volumedown\n\r");
            gamemode += 1;
            // tell other board to also change game
            while (UARTBusy(UARTA1_BASE))
                ;
            UARTCharPut(UARTA1_BASE, '-');
            break;
        }

        // reset times array for reading in another button press
        times_index = 0;
    }
}

// function to check 3 in a row for tic tac toe array
int tictaccheck(char c)
{
    int in_a_row;

    // rows
    for (i = 0; i < 3; i++)
    {
        in_a_row = 0;
        for (j = 0; j < 3; j++)
        {
            if (tic_tac_table[i][j].entry == c)
                in_a_row++;
            if (in_a_row == 3)
                return 1;
        }
    }

    // columns
    for (j = 0; j < 3; j++)
    {
        in_a_row = 0;
        for (i = 0; i < 3; i++)
        {
            if (tic_tac_table[i][j].entry == c)
                in_a_row++;
            if (in_a_row == 3)
                return 1;
        }
    }

    // diagonals
    if (tic_tac_table[0][0].entry == c && tic_tac_table[1][1].entry == c && tic_tac_table[2][2].entry == c)
        return 1;
    if (tic_tac_table[2][0].entry == c && tic_tac_table[1][1].entry == c && tic_tac_table[0][2].entry == c)
        return 1;

    return 0;
}

// red board button presses for rock paper scissors game
void rpsbuttons()
{
    if (times_index == 34)
    {
        long int binary = 0;

        int binary_index = 31;

        // iterate through time array to calculate the decimal notation of the binary number in the data field of the waveform received
        for (i = 1; i < 33; i++)
        {
            if ((times[i] - times[i + 1]) > 170000)
            {
                binary |= 1 << binary_index;
            }
            binary_index--;
        }

        switch (binary)
        {
        case one:
            Message("One\n\r");
            // red board chosed rock, then send over UART1 to tell yellow board that red has chosen rock
            if (rpstable[0].entry == ' ')
            {
                rpstable[0].entry = 'R';
                drawChar(rpstable[0].x, rpstable[0].y, 'R', RED, BLACK, 4);
                while (UARTBusy(UARTA1_BASE))
                    ;
                UARTCharPut(UARTA1_BASE, '1');
            }
            break;
        case two:
            Message("Two\n\r");
            if (rpstable[0].entry == ' ')
            {
                rpstable[0].entry = 'P';
                drawChar(rpstable[0].x, rpstable[0].y, 'P', RED, BLACK, 4);
                while (UARTBusy(UARTA1_BASE))
                    ;
                UARTCharPut(UARTA1_BASE, '2');
            }
            break;
        case three:
            Message("Three\n\r");
            if (rpstable[0].entry == ' ')
            {
                rpstable[0].entry = 'S';
                drawChar(rpstable[0].x, rpstable[0].y, 'S', RED, BLACK, 4);
                while (UARTBusy(UARTA1_BASE))
                    ;
                UARTCharPut(UARTA1_BASE, '3');
            }
            break;
        case volumedown: // change game
            Message("Volumedown\n\r");
            gamemode += 1;
            while (UARTBusy(UARTA1_BASE))
                ;
            UARTCharPut(UARTA1_BASE, '-');
            break;
        }

        // reset times array for reading in another button press
        times_index = 0;
    }
}

// parse json correctly for POST then post json to device shadow
static int http_post(int iTLSSockID)
{
    char acSendBuff[512];
    char acRecvbuff[1460];
    char cCLLength[200];
    char *pcBufHeaders;
    int lRetVal = 0;

    pcBufHeaders = acSendBuff;
    strcpy(pcBufHeaders, POSTHEADER);
    pcBufHeaders += strlen(POSTHEADER);
    strcpy(pcBufHeaders, HOSTHEADER);
    pcBufHeaders += strlen(HOSTHEADER);
    strcpy(pcBufHeaders, CHEADER);
    pcBufHeaders += strlen(CHEADER);
    strcpy(pcBufHeaders, "\r\n\r\n");

    i = 0;
    while (red_wins_buff[i] != '\0')
    {
        i++;
    }

    j = 0;
    while (yellow_wins_buff[j] != '\0')
    {
        j++;
    }

    int dataLength = strlen(DATA1) + i + j + 1 + strlen(DATA2);

    strcpy(pcBufHeaders, CTHEADER);
    pcBufHeaders += strlen(CTHEADER);
    strcpy(pcBufHeaders, CLHEADER1);

    pcBufHeaders += strlen(CLHEADER1);
    sprintf(cCLLength, "%d", dataLength);

    strcpy(pcBufHeaders, cCLLength);
    pcBufHeaders += strlen(cCLLength);
    strcpy(pcBufHeaders, CLHEADER2);
    pcBufHeaders += strlen(CLHEADER2);

    strcpy(pcBufHeaders, DATA1);
    pcBufHeaders += strlen(DATA1);

    for (n = 0; n < i; n++)
    {
        char buf[1] = red_wins_buff[n];
        char *buf_ptr;
        buf_ptr = buf;
        strcpy(pcBufHeaders, buf_ptr);
        pcBufHeaders += 1;
    }
    char buf[1] = ",";
    char *buf_ptr;
    buf_ptr = buf;
    strcpy(pcBufHeaders, buf_ptr);
    pcBufHeaders += 1;
    for (n = 0; n < j; n++)
    {
        char buf[1] = yellow_wins_buff[n];
        char *buf_ptr;
        buf_ptr = buf;
        strcpy(pcBufHeaders, buf_ptr);
        pcBufHeaders += 1;
    }

    strcpy(pcBufHeaders, DATA2);
    pcBufHeaders += strlen(DATA2);

    int testDataLength = strlen(pcBufHeaders);

    UART_PRINT(acSendBuff);

    //
    // Send the packet to the server //
    //
    lRetVal = sl_Send(iTLSSockID, acSendBuff, strlen(acSendBuff), 0);
    if (lRetVal < 0)
    {
        UART_PRINT("POST failed. Error Number: %i\n\r", lRetVal);
        sl_Close(iTLSSockID);
        GPIO_IF_LedOn(MCU_RED_LED_GPIO);
        return lRetVal;
    }
    lRetVal = sl_Recv(iTLSSockID, &acRecvbuff[0], sizeof(acRecvbuff), 0);
    if (lRetVal < 0)
    {
        UART_PRINT("Received failed. Error Number: %i\n\r", lRetVal);
        // sl_Close(iSSLSockID);
        GPIO_IF_LedOn(MCU_RED_LED_GPIO);
        return lRetVal;
    }
    else
    {
        acRecvbuff[lRetVal + 1] = '\0';
        UART_PRINT(acRecvbuff);
        UART_PRINT("\n\r\n\r");
    }

    return 0;
}

// parse sendbuf correctly for GET then get json from device shadow sl_Send and sl_recv
static int http_get(int iTLSSockID)
{
    char acSendBuff[512];
    char acRecvbuff[1460];
    char *pcBufHeaders;
    int lRetVal = 0;

    pcBufHeaders = acSendBuff;
    strcpy(pcBufHeaders, GETHEADER);
    pcBufHeaders += strlen(GETHEADER);
    strcpy(pcBufHeaders, HOSTHEADER);
    pcBufHeaders += strlen(HOSTHEADER);
    strcpy(pcBufHeaders, CHEADER);
    pcBufHeaders += strlen(CHEADER);
    strcpy(pcBufHeaders, "\r\n\r\n");

    UART_PRINT(acSendBuff);

    //
    // Send the packet to the server */
    //
    lRetVal = sl_Send(iTLSSockID, acSendBuff, strlen(acSendBuff), 0);
    if (lRetVal < 0)
    {
        UART_PRINT("POST failed. Error Number: %i\n\r", lRetVal);
        sl_Close(iTLSSockID);
        GPIO_IF_LedOn(MCU_RED_LED_GPIO);
        return lRetVal;
    }
    lRetVal = sl_Recv(iTLSSockID, &acRecvbuff[0], sizeof(acRecvbuff), 0);
    if (lRetVal < 0)
    {
        UART_PRINT("Received failed. Error Number: %i\n\r", lRetVal);
        // sl_Close(iSSLSockID);
        GPIO_IF_LedOn(MCU_RED_LED_GPIO);
        return lRetVal;
    }
    else
    {
        acRecvbuff[lRetVal + 1] = '\0';

        // where information about red wins and yellow wins start in recvbuff
        i = 306;

        // get red wins from json recvbuff
        char str_red_wins[16];
        int red_wins_index = 0;
        while (acRecvbuff[i] != ',')
        {
            str_red_wins[red_wins_index++] = acRecvbuff[i];
            i++;
        }
        str_red_wins[red_wins_index] = '\0';
        red_wins = atoi(str_red_wins);

        // skip comma
        i++;

        // get yellow wins from json recvbuff
        char str_yellow_wins[16];
        int yellow_wins_index = 0;
        while (acRecvbuff[i] != '"')
        {
            str_yellow_wins[yellow_wins_index++] = acRecvbuff[i];
            i++;
        }
        str_yellow_wins[yellow_wins_index] = '\0';
        yellow_wins = atoi(str_yellow_wins);

        sprintf(red_wins_buff, "%d", red_wins);
        sprintf(yellow_wins_buff, "%d", yellow_wins);

        UART_PRINT(acRecvbuff);
        UART_PRINT("\n\r\n\r");
    }

    return 0;
}
